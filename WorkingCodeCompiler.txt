using ArghyaC.ViewModels;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Text;
using System.Web.Mvc;

namespace ArghyaC.Controllers
{
    public class CodeController : Controller
    {
        const string codeFolder = @"C:\Arghya\Repos\ArghyaC\SubmittedCodes";

        public ActionResult Index()
        {
            return View(new HmGameViewModel());
        }

        [HttpPost]
        public ActionResult Index(string code)
        {
            var fileName = System.IO.Path.Combine(codeFolder, "Code" + System.DateTime.Now.ToString("yyyyMMdd_hhmmss.mm") + ".cs");
            System.IO.File.WriteAllText(fileName, code);

            var csc = new CSharpCodeProvider(new Dictionary<string, string>() { { "CompilerVersion", "v4.0" } });
            var parameters = new CompilerParameters(new[] { "mscorlib.dll", "System.Core.dll" }, "foo.exe", true);
            parameters.GenerateExecutable = true;
            CompilerResults results = csc.CompileAssemblyFromSource(parameters,
            @"using System.Linq;
            class Program {
              public static void Main(string[] args) {
                var q = from i in Enumerable.Range(1,100)
                          where i % 2 == 0
                          select i;
              }
            }");
            if (results.Errors.HasErrors)
            {
                var errors = results.Errors;
                var sb = new StringBuilder();
                var totalErrors = results.Errors.Count;
                for (int i = 0; i < totalErrors; i++)
                {
                    var error = errors[i];
                    sb.Append(string.Format("{0} : {1} at ({2})", error.ErrorNumber, error.ErrorText, error.Line));
                }
                var allErrors = sb.ToString();
            }
             //.ToList().ForEach(error => Console.WriteLine(error.ErrorText));

            return View(new HmGameViewModel());
        }
    }
}